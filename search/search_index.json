{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PHI Masker Utils","text":"<p>Collection of Python modules for masking PHI in delimited files and Excel worksheets.</p>"},{"location":"#commands","title":"Commands","text":"<p>The following exported scripts are available:</p> <ul> <li>mask-file</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>GitHub</li> <li>PYPI</li> </ul>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#v010-2024-09-15","title":"v0.1.0 - 2024-09-15","text":"<p>ADDS: - Initial implementation to support masking in comma-separated files. - Initial implementation to support masking in tab-delimited files.</p>"},{"location":"INSTALL/","title":"INSTALL","text":""},{"location":"INSTALL/#install-from-pypi","title":"Install from PYPI","text":"<p>Now you can install your package in your Python virtual environment</p> <pre><code>pip install tbd\n</code></pre>"},{"location":"INSTALL/#clone-project","title":"Clone project","text":"<p>You can <code>git clone</code> this project.</p> <pre><code>git clone https://github.com/jai-python3/tbd.git\ncd tbd\n</code></pre>"},{"location":"INSTALL/#local-pip-install","title":"Local pip install","text":"<p>You can optionally establish a Python virtual environment. Then you can run the <code>setup.py</code> script to build to project and then run <code>pip install</code> to install in your local Python virtual environment.</p> <pre><code>virtualenv -p python3 venv\nsource venv/bin/activate\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#uninstall","title":"Uninstall","text":"<p>You can uninstall like this:</p> <pre><code>source venv/bin/activate\npip uninstall tbd\nmake clean\n</code></pre>"},{"location":"INSTALL/#developers","title":"Developers","text":"<p>If you modify the code in this package in your local virtual environment:</p> <pre><code>pip uninstall tbd\nmake clean\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#publish-to-pypi","title":"Publish to PYPI","text":"<p>You want can publish the code in this package to the PYPI repository.</p>"},{"location":"INSTALL/#install-twine-and-setuptools","title":"Install twine and setuptools","text":"<p>Install <code>twine</code> and <code>setuptools</code>.</p> <pre><code>pip install twine setuptools\n</code></pre>"},{"location":"INSTALL/#build-the-distribution-package","title":"Build the Distribution Package","text":"<pre><code>python setup.py sdist bdist_wheel\n</code></pre>"},{"location":"INSTALL/#configure-your-pypirc","title":"Configure your ~/.pypirc:","text":"<pre><code>[pypi]\n  username = __token__\n  password = pypi-YOUR-TOKEN\n</code></pre>"},{"location":"INSTALL/#upload-your-package-to-pypi","title":"Upload Your Package to PyPI","text":"<pre><code>twine upload dist/*\n</code></pre>"},{"location":"TODO/","title":"TODO","text":"<ul> <li>refactor profiling module</li> <li>unit tests (pytest)</li> <li>use case diagram</li> <li>class diagram</li> </ul>"},{"location":"console_helper/","title":"Console Helper module","text":""},{"location":"constants/","title":"Constants module","text":""},{"location":"file_utils/","title":"File Utils module","text":"<p>A collection of utility functions for file management and data integrity.</p> <p>Functions: - calculate_md5(file_path): Calculate the MD5 hash of a file specified by its path. - check_indir_status(indir=None): Check the status of a directory, providing information on its existence and contents. - check_infile_status(infile, extension=None): Check the status of a file, including its existence and optionally validate its extension. - get_file_creation_date(file_path): Retrieve the creation date of a file specified by its path. - get_file_list(indir=None, extension=None): Get the list of files in the specified directory. - get_file_size(file_path): Get the size of a file specified by its path. - get_line_count(file_path): Get the number of lines in a file specified by its path. - is_binary_file(file_path, block_size=1024): Determine whether a file is binary or text.</p> <p>Use these functions to enhance file handling and data validation in your Python projects.</p>"},{"location":"file_utils/#phi_masker_utils.file_utils.calculate_md5","title":"<code>calculate_md5(file_path)</code>","text":"<p>Calculate the md5 checksum for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the file for which the md5 checksum will be calculated</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the calculated md5 checksum</p> Source code in <code>phi_masker_utils/file_utils.py</code> <pre><code>def calculate_md5(file_path: str) -&gt; str:\n    \"\"\"Calculate the md5 checksum for the specified file.\n\n    Args:\n        file_path (str): the file for which the md5 checksum will be calculated\n\n    Returns:\n        str: the calculated md5 checksum\n    \"\"\"\n    md5_hash = hashlib.md5()\n    logging.info(f\"Will attempt to calculate the MD5 checksum for file '{file_path}'\")\n\n    with open(file_path, \"rb\") as file:\n        # Read the file in chunks to efficiently handle large files\n        for chunk in iter(lambda: file.read(4096), b\"\"):\n            md5_hash.update(chunk)\n\n    return md5_hash.hexdigest()\n</code></pre>"},{"location":"file_utils/#phi_masker_utils.file_utils.check_indir_status","title":"<code>check_indir_status(indir=None)</code>","text":"<p>Check if the directory exists and is a regular directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>the directory to be checked</p> <code>None</code> Source code in <code>phi_masker_utils/file_utils.py</code> <pre><code>def check_indir_status(indir: str = None) -&gt; None:\n    \"\"\"Check if the directory exists and is a regular directory.\n\n    Args:\n        indir (str): the directory to be checked\n    \"\"\"\n    error_ctr = 0\n\n    if indir is None or indir == '':\n        error_console.print(f\"'{indir}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(indir):\n            error_ctr += 1\n            error_console.print(f\"directory '{indir}' does not exist\")\n        else:\n            if not os.path.isdir(indir):\n                error_ctr += 1\n                error_console.print(f\"'{indir}' is not a regular directory\")\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input directory '{indir}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#phi_masker_utils.file_utils.check_infile_status","title":"<code>check_infile_status(infile, extension=None)</code>","text":"<p>Check if the file exists, if it is a regular file and whether it has content.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>the file to be checked</p> required Source code in <code>phi_masker_utils/file_utils.py</code> <pre><code>def check_infile_status(infile: str, extension: Optional[str] = None) -&gt; None:\n    \"\"\"Check if the file exists, if it is a regular file and whether it has\n    content.\n\n    Args:\n        infile (str): the file to be checked\n\n    Raises:\n        None\n    \"\"\"\n\n    error_ctr = 0\n\n    if infile is None or infile == \"\":\n        error_console.print(f\"'{infile}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(infile):\n            error_ctr += 1\n            error_console.print(f\"'{infile}' does not exist\")\n        else:\n            if not os.path.isfile(infile):\n                error_ctr += 1\n                error_console.print(f\"'{infile}' is not a regular file\")\n            if os.stat(infile).st_size == 0:\n                error_console.print(f\"'{infile}' has no content\")\n                error_ctr += 1\n            if extension is not None and not infile.endswith(extension):\n                error_console.print(\n                    f\"'{infile}' does not have filename extension '{extension}'\"\n                )\n                error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input file '{infile}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#phi_masker_utils.file_utils.get_file_creation_date","title":"<code>get_file_creation_date(file_path)</code>","text":"<p>Determine the creation date for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the absolute path of the file</p> required <p>Returns:</p> Name Type Description <code>datetime</code> <code>datetime</code> <p>the date the file was created according to the operating system</p> Source code in <code>phi_masker_utils/file_utils.py</code> <pre><code>def get_file_creation_date(file_path: str) -&gt; datetime:\n    \"\"\"Determine the creation date for the specified file.\n\n    Args:\n        file_path (str): the absolute path of the file\n\n    Returns:\n        datetime: the date the file was created according to the operating system\n    \"\"\"\n    if platform.system() == \"Windows\":\n        # On Windows, use creation time\n        creation_time = os.path.getctime(file_path)\n    else:\n        # On Unix-based systems, use birth time (creation time)\n        # Note: Not all file systems support birth time, and it might not be available on some systems.\n        stat_info = os.stat(file_path)\n        creation_time = stat_info.st_mtime\n\n    # Convert the timestamp to a readable date\n    creation_date = datetime.fromtimestamp(creation_time)\n\n    return creation_date\n</code></pre>"},{"location":"file_utils/#phi_masker_utils.file_utils.get_file_list","title":"<code>get_file_list(indir=None, extension=None)</code>","text":"<p>Get the list of files in the specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>the directory to search for files</p> <code>None</code> <code>extension</code> <code>str</code> <p>the file extension to filter on</p> <code>None</code> <p>Returns:</p> Name Type Description <code>file_list</code> <code>List[str]</code> <p>the list of files found in the directory</p> Source code in <code>phi_masker_utils/file_utils.py</code> <pre><code>def get_file_list(indir: str = None, extension: str = None) -&gt; List[str]:\n    \"\"\"Get the list of files in the specified directory.\n\n    Args:\n        indir (str): the directory to search for files\n        extension (str): the file extension to filter on\n\n    Returns:\n        file_list (List[str]): the list of files found in the directory\n    \"\"\"\n    if extension is None:\n        logging.info(f\"Going to search for files in directory '{indir}'\")\n    else:\n        logging.info(f\"Going to search for files with extension '{extension}' in directory '{indir}'\")\n\n    file_list = []\n\n    for dirpath, dirnames, filenames in os.walk(indir):\n\n        if 'venv' in dirpath:\n            logging.info(f\"Going to ignore files in directory '{dirpath}'\")\n            continue\n        for name in filenames:\n            filepath = os.path.normpath(os.path.join(dirpath, name))\n            if os.path.isfile(filepath):\n                if extension is not None:\n                    if filepath.endswith(f'.{extension}'):\n                        file_list.append(filepath)\n                else:\n                    file_list.append(filepath)\n\n    return file_list\n</code></pre>"},{"location":"mask_file/","title":"Mask File module","text":"<p>Mask PHI values in a delimited file or an Excel worksheet.</p>"},{"location":"mask_file/#phi_masker_utils.mask_file.main","title":"<code>main(config_file, infile, logfile, outdir, outfile, verbose)</code>","text":"<p>Mask PHI values in a delimited file or an Excel worksheet.</p> Source code in <code>phi_masker_utils/mask_file.py</code> <pre><code>@click.command()  # type: ignore\n@click.option(\n    \"--config_file\",\n    type=click.Path(exists=True),\n    help=f\"Optional: The configuration file for this project - default is '{constants.DEFAULT_CONFIG_FILE}'.\",\n)  # type: ignore\n@click.option(\n    \"--infile\",\n    help=\"Required: The input file to be processed.\",\n)  # type: ignore\n@click.option(\"--logfile\", help=\"Optional: The log file.\")  # type: ignore\n@click.option(\n    \"--outdir\",\n    help=f\"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'.\",\n)  # type: ignore\n@click.option(\"--outfile\", help=\"Optional: The output file that will have all PHI values masked.\")  # type: ignore\n@click.option(\n    \"--verbose\",\n    is_flag=True,\n    help=f\"Will print more info to STDOUT - default is '{constants.DEFAULT_VERBOSE}'.\",\n    callback=validate_verbose,\n)  # type: ignore\ndef main(\n    config_file: str,\n    infile: str,\n    logfile: str,\n    outdir: str,\n    outfile: str,\n    verbose: bool,\n) -&gt; None:\n    \"\"\"Mask PHI values in a delimited file or an Excel worksheet.\"\"\"\n    error_ctr = 0\n\n    if infile is None:\n        print_red(\"--infile was not specified\")\n        error_ctr += 1\n\n    if error_ctr &gt; 0:\n        sys.exit(1)\n\n    check_infile_status(infile)\n\n    infile = os.path.abspath(infile)\n\n    if config_file is None:\n        config_file = constants.DEFAULT_CONFIG_FILE\n        print_yellow(\n            f\"--config_file was not specified and therefore was set to '{config_file}'\"\n        )\n\n    check_infile_status(config_file, extension=\"yaml\")\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir, os.path.splitext(os.path.basename(__file__))[0] + \".log\"\n        )\n        print_yellow(\n            f\"--logfile was not specified and therefore was set to '{logfile}'\"\n        )\n\n    if outfile is None:\n        basename = os.path.splitext(os.path.basename(infile))[0]\n        extension = os.path.splitext(infile)[1]\n        outfile = os.path.join(\n            outdir,\n            f\"{basename}{extension}\"\n        )\n        if infile == outfile:\n            outfile = os.path.join(\n                outdir,\n                f\"{basename}_masked{extension}\"\n            )\n        print_yellow(\n            f\"--outfile was not specified and therefore was set to '{outfile}'\"\n        )\n\n    logging.basicConfig(\n        format=constants.DEFAULT_LOGGING_FORMAT,\n        level=constants.DEFAULT_LOGGING_LEVEL,\n        filename=logfile,\n    )\n\n    logging.info(f\"Will load contents of config file '{config_file}'\")\n    config = yaml.safe_load(pathlib.Path(config_file).read_text())\n\n    masker = Masker(\n        config=config,\n        config_file=config_file,\n        infile=infile,\n        logfile=logfile,\n        outdir=outdir,\n        outfile=outfile,\n        verbose=verbose,\n    )\n\n    masker.mask_phi_values()\n\n    if verbose:\n        print_yellow(f\"The log file is '{logfile}'\")\n        print_green(f\"Execution of '{os.path.abspath(__file__)}' completed\")\n</code></pre>"},{"location":"mask_file/#phi_masker_utils.mask_file.validate_verbose","title":"<code>validate_verbose(ctx, param, value)</code>","text":"<p>Validate the validate option.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>param</code> <code>str</code> <p>The parameter.</p> required <code>value</code> <code>bool</code> <p>The value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The value.</p> Source code in <code>phi_masker_utils/mask_file.py</code> <pre><code>def validate_verbose(ctx, param, value):\n    \"\"\"Validate the validate option.\n\n    Args:\n        ctx (Context): The click context.\n        param (str): The parameter.\n        value (bool): The value.\n\n    Returns:\n        bool: The value.\n    \"\"\"\n\n    if value is None:\n        click.secho(\n            \"--verbose was not specified and therefore was set to 'True'\", fg=\"yellow\"\n        )\n        return constants.DEFAULT_VERBOSE\n    return value\n</code></pre>"},{"location":"masker/","title":"Masker module","text":"<p>TBD.</p>"},{"location":"masker/#phi_masker_utils.masker.Masker","title":"<code>Masker</code>","text":"<p>Class for masking tab-delimited files, comma-separated files and Excel worksheets.</p> Source code in <code>phi_masker_utils/masker.py</code> <pre><code>class Masker:\n    \"\"\"Class for masking tab-delimited files, comma-separated files and Excel worksheets.\"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Constructor for Masker.\"\"\"\n        self.config = kwargs.get(\"config\", None)\n        self.config_file = kwargs.get(\"config_file\", None)\n        self.infile = kwargs.get(\"infile\", None)\n        self.logfile = kwargs.get(\"logfile\", None)\n        self.outdir = kwargs.get(\"outdir\", None)\n        self.outfile = kwargs.get(\"outfile\", None)\n        self.verbose = kwargs.get(\"verbose\", constants.DEFAULT_VERBOSE)\n\n        check_infile_status(self.infile)\n        check_infile_status(self.config_file)\n\n        self._masked_lookup = {}\n\n        self.faker = Faker()\n\n        if self.outfile is None or self.outfile == \"\":\n            self._derive_outfile()\n\n        self.extension = os.path.splitext(self.infile)[1]\n        if self.extension.startswith(\".\"):\n            self.extension = self.extension[1:]\n\n        logging.info(f\"Instantiated Masker in file '{os.path.abspath(__file__)}'\")\n\n    def _derive_outfile(self):\n        basename = os.path.basename(self.infile)\n        extension = os.path.splitext(self.infile)[1]\n        self.outfile = os.path.join(\n            self.outdir,\n            f\"{basename}.{extension}\"\n        )\n\n        if self.infile == self.outfile:\n            self.outfile = os.path.join(\n                self.outdir,\n                f\"{basename}_masked.{extension}\"\n            )\n\n        logging.info(f\"Derived outfile '{self.outfile}' for infile '{self.infile}'\")\n\n    def mask_phi_values(self):\n        \"\"\"Mask the PHI values in the input file.\"\"\"\n        if self.extension == \"csv\":\n            self._mask_csv()\n        elif self.extension == \"tsv\" or self.extension == \"txt\":\n            self._mask_tsv()\n        elif self.extension == \"xlsx\":\n            self._mask_xlsx()\n        else:\n            raise Exception(f\"Unsupported file extension '{self.extension}'\")\n        self._write_masked_values()\n\n    def _write_masked_values(self):\n        \"\"\"Write the masked values to the output file.\"\"\"\n        outfile = os.path.join(self.outdir, \"masked_values.txt\")\n\n        with open(outfile, 'w') as of:\n            of.write(f\"## method-created: {os.path.abspath(__file__)}\\n\")\n            of.write(f\"## date-created: {str(datetime.today().strftime('%Y-%m-%d-%H%M%S'))}\\n\")\n            of.write(f\"## created-by: {os.environ.get('USER')}\\n\")\n            of.write(f\"## config_file: {self.config_file}\\n\")\n            of.write(f\"## infile: {self.infile}\\n\")\n            of.write(f\"## outfile: {self.outfile}\\n\")\n            of.write(f\"## logfile: {self.logfile}\\n\")\n\n            for key, value in self._masked_lookup.items():\n                of.write(f\"{key} -&gt; {value}\\n\")\n\n        logging.info(f\"Wrote masked values file '{outfile}'\")\n        if self.verbose:\n            print(f\"Wrote masked values file '{outfile}'\")\n\n    def _load_delimited_rules(self):\n        \"\"\"Load the delimited mask rules from the config file.\"\"\"\n        if \"rules\" not in self.config:\n            raise Exception(f\"Missing 'rules' section in config file '{self.config_file}'\")\n\n        if \"delimited\" not in self.config[\"rules\"]:\n            raise Exception(f\"Missing 'delimited' section in 'rules' section in config file '{self.config_file}'\")\n\n        self.rules = self.config.get(\"rules\").get(\"delimited\")\n\n        logging.info(f\"Loaded delimited rules from config file '{self.config_file}'\")\n\n    def _load_xlsx_rules(self):\n        \"\"\"Load the Excel xlsx file mask rules from the config file.\"\"\"\n        if \"rules\" not in self.config[\"rules\"]:\n            raise Exception(f\"Missing 'rules' section in config file '{self.config_file}'\")\n\n        if \"xlsx\" not in self.config[\"rules\"]:\n            raise Exception(f\"Missing 'xlsx' section in 'rules' section in config file '{self.config_file}'\")\n\n        self.rules = self.config.get(\"rules\").get(\"xlsx\")\n\n        logging.info(f\"Loaded xlsx rules from config file '{self.config_file}'\")\n\n    def _mask_delimited_value(self, value: str, field_name: str) -&gt; str:\n        \"\"\"Mask the value of a delimited field.\"\"\"\n        if field_name not in self.rules:\n            logging.info(f\"Missing rule for field '{field_name}' in config file '{self.config_file}'\")\n            return value\n\n        if value not in self._masked_lookup:\n\n            logging.info(f\"Will attempt to mask '{value}' for field '{field_name}'\")\n\n            datatype = self.rules[field_name].get(\"datatype\", None)\n\n            if datatype is None:\n                if \"values\" not in self.rules[field_name]:\n                    datatype = \"string\"\n                    logging.warning(f\"Missing 'datatype' for field '{field_name}' in config file '{self.config_file}' so set to default '{datatype}'\")\n                else:\n                    # Randomly select a value from the list of values\n                    values = self.rules[field_name].get(\"values\")\n                    new_value = self.faker.random_element(elements=values)\n                    self._masked_lookup[value] = new_value\n                    return new_value\n\n            if datatype.lower() == \"date\":\n                format = self.rules[field_name].get(\"format\", None)\n                if format is None:\n                    format = \"YYYY-MM-DD\"\n                    logging.warning(f\"Missing 'format' for field '{field_name}' in config file '{self.config_file}' so set to default '{format}'\")\n                if format.upper() == \"YYYY-MM-DD\":\n                    date = self.faker.date_object()\n                    new_value = date.strftime(\"%Y-%m-%d\")\n                    self._masked_lookup[value] = new_value\n\n                else:\n                    raise Exception(f\"Unsupported date format '{format}' for field '{field_name}' in config file '{self.config_file}'\")\n            elif datatype.lower() == \"age\":\n                new_value = self.faker.random_int(min=1, max=100)\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"email\":\n                new_value = self.faker.email()\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"first_name\":\n                new_value = self.faker.first_name()\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"full_name\":\n                new_value = self.faker.name()\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"last_name\":\n                new_value = self.faker.last_name()\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"phone_number\":\n                new_value = self.faker.phone_number()\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"gender\":\n                new_value = self.faker.random_element(elements=(\"Male\", \"Female\"))\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"uuid\":\n                new_value = self.faker.uuid4()\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"zipcode\":\n                new_value = self.faker.zipcode()\n                self._masked_lookup[value] = new_value\n            elif datatype.lower() == \"dob\":\n                new_value = self.faker.date_of_birth()\n                self._masked_lookup[value] = new_value\n\n        return self._masked_lookup[value]\n\n    def _mask_csv(self):\n        \"\"\"Mask the PHI values in the input CSV file.\"\"\"\n        logging.info(f\"Will mask PHI values in CSV file '{self.infile}'\")\n\n        self._load_delimited_rules()\n\n        position_to_header_lookup = {}\n        header_to_position_lookup = {}\n        header_list = []\n        out_records = []\n        record_ctr = 0\n\n        with open(self.infile) as f:\n            reader = csv.reader(f)\n            for row_ctr, row in enumerate(reader):\n                if row_ctr == 0:\n                    for field_ctr, field in enumerate(row):\n                        header_list.append(field)\n                        header_to_position_lookup[field] = field_ctr\n                        position_to_header_lookup[field_ctr] = field\n                        field_ctr += 1\n                    logging.info(f\"Processed the header of csv file '{self.infile}'\")\n                else:\n                    for field_ctr, field_value in enumerate(row):\n                        field_name = position_to_header_lookup[field_ctr]\n                        if field_name in self.rules:\n                            field_value = self._mask_delimited_value(field_value, field_name)\n                            row[field_ctr] = field_value\n                    out_records.append(row)\n\n                    record_ctr += 1\n\n            logging.info(f\"Processed '{record_ctr}' records in csv file '{self.infile}'\")\n\n        with open(self.outfile, 'w') as of:\n            header = \",\".join(header_list)\n            of.write(f\"{header}\\n\")\n\n            for out_record in out_records:\n                record = [str(field) for field in out_record]\n                line = \",\".join(record)\n                of.write(f\"{line}\\n\")\n\n        logging.info(f\"Wrote masked csv file '{self.outfile}'\")\n        if self.verbose:\n            print(f\"Wrote masked csv file '{self.outfile}'\")\n\n        logging.info(f\"Masked PHI values in CSV file '{self.infile}'\")\n\n    def _mask_tsv(self):\n        \"\"\"Mask the PHI values in the input tab-delimited file.\"\"\"\n        logging.info(f\"Will mask PHI values in tab-delimited file '{self.infile}'\")\n\n        self._load_delimited_rules()\n\n        position_to_header_lookup = {}\n        header_to_position_lookup = {}\n        header_list = []\n        out_records = []\n        record_ctr = 0\n\n        with open(self.infile) as f:\n            reader = csv.reader(f, delimiter='\\t')\n            for row_ctr, row in enumerate(reader):\n                if row_ctr == 0:\n                    for field_ctr, field in enumerate(row):\n                        header_list.append(field)\n                        header_to_position_lookup[field] = field_ctr\n                        position_to_header_lookup[field_ctr] = field\n                        field_ctr += 1\n                    logging.info(f\"Processed the header of tab-delimited file '{self.infile}'\")\n                else:\n                    for field_ctr, field_value in enumerate(row):\n                        field_name = position_to_header_lookup[field_ctr]\n                        if field_name in self.rules:\n                            field_value = self._mask_delimited_value(field_value, field_name)\n                            row[field_ctr] = field_value\n                    out_records.append(row)\n\n                    record_ctr += 1\n\n            logging.info(f\"Processed '{record_ctr}' records in tab-delimited file '{self.infile}'\")\n\n        with open(self.outfile, 'w') as of:\n            header = \"\\t\".join(header_list)\n            of.write(f\"{header}\\n\")\n\n            for out_record in out_records:\n                record = [str(field) for field in out_record]\n                line = \"\\t\".join(record)\n                of.write(f\"{line}\\n\")\n\n        logging.info(f\"Wrote masked tab-delimited file '{self.outfile}'\")\n        if self.verbose:\n            print(f\"Wrote masked tab-delimited file '{self.outfile}'\")\n\n        logging.info(f\"Masked PHI values in tab-delimited file '{self.infile}'\")\n</code></pre>"},{"location":"masker/#phi_masker_utils.masker.Masker.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Constructor for Masker.</p> Source code in <code>phi_masker_utils/masker.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Constructor for Masker.\"\"\"\n    self.config = kwargs.get(\"config\", None)\n    self.config_file = kwargs.get(\"config_file\", None)\n    self.infile = kwargs.get(\"infile\", None)\n    self.logfile = kwargs.get(\"logfile\", None)\n    self.outdir = kwargs.get(\"outdir\", None)\n    self.outfile = kwargs.get(\"outfile\", None)\n    self.verbose = kwargs.get(\"verbose\", constants.DEFAULT_VERBOSE)\n\n    check_infile_status(self.infile)\n    check_infile_status(self.config_file)\n\n    self._masked_lookup = {}\n\n    self.faker = Faker()\n\n    if self.outfile is None or self.outfile == \"\":\n        self._derive_outfile()\n\n    self.extension = os.path.splitext(self.infile)[1]\n    if self.extension.startswith(\".\"):\n        self.extension = self.extension[1:]\n\n    logging.info(f\"Instantiated Masker in file '{os.path.abspath(__file__)}'\")\n</code></pre>"},{"location":"masker/#phi_masker_utils.masker.Masker.mask_phi_values","title":"<code>mask_phi_values()</code>","text":"<p>Mask the PHI values in the input file.</p> Source code in <code>phi_masker_utils/masker.py</code> <pre><code>def mask_phi_values(self):\n    \"\"\"Mask the PHI values in the input file.\"\"\"\n    if self.extension == \"csv\":\n        self._mask_csv()\n    elif self.extension == \"tsv\" or self.extension == \"txt\":\n        self._mask_tsv()\n    elif self.extension == \"xlsx\":\n        self._mask_xlsx()\n    else:\n        raise Exception(f\"Unsupported file extension '{self.extension}'\")\n    self._write_masked_values()\n</code></pre>"},{"location":"software_specification_template/","title":"Software specification template","text":"<p>Below is a simple software development specification template for designing and implementing a Python Command-Line Interface (CLI) program. Feel free to customize it based on your specific needs.</p>"},{"location":"software_specification_template/#software-development-specification","title":"Software Development Specification","text":""},{"location":"software_specification_template/#project-title","title":"Project Title","text":"<p>Objective: Briefly describe the purpose and goals of the project.</p>"},{"location":"software_specification_template/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Requirements</li> <li>Functional Specifications</li> <li>3.1 Use Cases</li> <li>3.2 Features</li> <li>Technical Specifications</li> <li>4.1 Programming Language</li> <li>4.2 Dependencies</li> <li>4.3 Directory Structure</li> <li>4.4 CLI Interface</li> <li>Development Environment</li> <li>Testing</li> <li>Documentation</li> <li>Version Control</li> <li>Deployment</li> <li>Maintenance</li> </ol>"},{"location":"software_specification_template/#1-introduction","title":"1. Introduction","text":"<p>Provide an overview of the project, including its purpose, target audience, and any relevant background information.</p>"},{"location":"software_specification_template/#2-requirements","title":"2. Requirements","text":"<p>List the functional and non-functional requirements for the project.</p>"},{"location":"software_specification_template/#functional-requirements","title":"Functional Requirements","text":"<p>Functional requirements describe the specific features and capabilities that a software system must have to meet the intended use and purpose. Here are examples of functional requirements for a Python CLI program:</p>"},{"location":"software_specification_template/#1-user-authentication","title":"1. User Authentication","text":"<ul> <li>Description: The CLI program should support user authentication to ensure that only authorized users can access certain functionalities.</li> <li>Acceptance Criteria: Users must provide valid credentials (username and password) to log in. Unauthorized access attempts should be denied.</li> </ul>"},{"location":"software_specification_template/#2-file-processing","title":"2. File Processing","text":"<ul> <li>Description: The CLI program should be able to read, write, and manipulate files on the local filesystem.</li> <li>Acceptance Criteria: Users should be able to specify input and output files as command-line arguments. The program must handle common file formats like text files and CSV files.</li> </ul>"},{"location":"software_specification_template/#3-data-validation","title":"3. Data Validation","text":"<ul> <li>Description: The CLI program should validate user input to ensure that it meets specified criteria.</li> <li>Acceptance Criteria: If the user provides invalid input (e.g., a non-numeric value for a numeric parameter), the program should display an appropriate error message and prompt the user to provide valid input.</li> </ul>"},{"location":"software_specification_template/#4-data-filtering","title":"4. Data Filtering","text":"<ul> <li>Description: Users should be able to filter data based on specified criteria.</li> <li>Acceptance Criteria: The program should allow users to use command-line options to filter data based on attributes such as date ranges, categories, or keywords.</li> </ul>"},{"location":"software_specification_template/#5-reporting","title":"5. Reporting","text":"<ul> <li>Description: The CLI program should generate reports based on processed data.</li> <li>Acceptance Criteria: Users should be able to request and generate reports using command-line options. The reports may be displayed on the console or saved to a specified file.</li> </ul>"},{"location":"software_specification_template/#6-batch-processing","title":"6. Batch Processing","text":"<ul> <li>Description: The CLI program should support batch processing of multiple files or data sets.</li> <li>Acceptance Criteria: Users should be able to provide a list of input files or directories as arguments, and the program should process them in sequence or in parallel.</li> </ul>"},{"location":"software_specification_template/#7-logging","title":"7. Logging","text":"<ul> <li>Description: The CLI program should log relevant information for troubleshooting and auditing purposes.</li> <li>Acceptance Criteria: The program should generate log files containing information about user actions, errors, and warnings.</li> </ul>"},{"location":"software_specification_template/#8-configuration","title":"8. Configuration","text":"<ul> <li>Description: Users should be able to configure the behavior of the CLI program through a configuration file.</li> <li>Acceptance Criteria: The program should read settings from a configuration file, allowing users to customize parameters such as default directories, logging levels, or output formats.</li> </ul>"},{"location":"software_specification_template/#9-help-and-documentation","title":"9. Help and Documentation","text":"<ul> <li>Description: The CLI program should provide help messages and documentation to guide users.</li> <li>Acceptance Criteria: Users should be able to access help messages by using a <code>--help</code> option or similar. The help messages should provide information about available commands, options, and usage examples.</li> </ul>"},{"location":"software_specification_template/#10-interactive-mode","title":"10. Interactive Mode","text":"<ul> <li>Description: The CLI program should support an interactive mode for users who prefer a more dynamic and iterative experience.</li> <li>Acceptance Criteria: Users should have the option to launch the program in interactive mode, where they can enter commands and receive immediate feedback.</li> </ul> <p>These examples cover a range of functionalities commonly found in CLI programs. Depending on the nature of your specific Python CLI program, you may have additional or different functional requirements.</p>"},{"location":"software_specification_template/#non-functional-requirements","title":"Non-functional Requirements","text":"<p>Non-functional requirements describe the qualities or characteristics that define how a software system should perform, rather than specific behaviors or features. Here are examples of non-functional requirements for a Python CLI program:</p>"},{"location":"software_specification_template/#1-performance","title":"1. Performance","text":"<ul> <li>Response Time: The CLI program should respond to user input within 2 seconds, ensuring a responsive user experience.</li> <li>Throughput: The program should handle a minimum of 100 file processing operations per minute.</li> </ul>"},{"location":"software_specification_template/#2-scalability","title":"2. Scalability","text":"<ul> <li>Scalability: The program should be able to handle an increasing number of concurrent users without a significant decrease in performance.</li> <li>Data Volume: It should support processing large files or datasets without a significant impact on response time.</li> </ul>"},{"location":"software_specification_template/#3-reliability","title":"3. Reliability","text":"<ul> <li>Availability: The CLI program should be available 99.9% of the time during standard operating hours.</li> <li>Fault Tolerance: The program should gracefully handle unexpected errors and recover without data loss.</li> </ul>"},{"location":"software_specification_template/#4-security","title":"4. Security","text":"<ul> <li>Authentication: User authentication should use secure mechanisms (e.g., hashed passwords) to protect user credentials.</li> <li>Authorization: Access to sensitive functionalities or data should be restricted based on user roles and permissions.</li> </ul>"},{"location":"software_specification_template/#5-usability","title":"5. Usability","text":"<ul> <li>User Interface Consistency: The CLI program should have a consistent and intuitive command-line interface.</li> <li>Documentation: The program should be well-documented, providing clear instructions on installation, configuration, and usage.</li> </ul>"},{"location":"software_specification_template/#6-maintainability","title":"6. Maintainability","text":"<ul> <li>Code Maintainability: The source code should follow coding standards and be well-commented to facilitate future maintenance.</li> <li>Modularity: The program should be designed with modular components to ease updates and modifications.</li> </ul>"},{"location":"software_specification_template/#7-compatibility","title":"7. Compatibility","text":"<ul> <li>Operating System Compatibility: The CLI program should be compatible with major operating systems, including Windows, macOS, and Linux.</li> <li>Python Version: The program should be compatible with Python 3.6 and above.</li> </ul>"},{"location":"software_specification_template/#8-performance-monitoring","title":"8. Performance Monitoring","text":"<ul> <li>Logging: The program should log performance metrics, errors, and warnings for monitoring and troubleshooting purposes.</li> <li>Alerting: Alerts should be triggered for critical errors or performance degradation.</li> </ul>"},{"location":"software_specification_template/#9-portability","title":"9. Portability","text":"<ul> <li>Dependency Management: The program should manage external dependencies effectively to ensure consistent behavior across different environments.</li> <li>Configuration Portability: Configuration files should be portable between different installations.</li> </ul>"},{"location":"software_specification_template/#10-compliance","title":"10. Compliance","text":"<ul> <li>Regulatory Compliance: The CLI program should comply with relevant data protection and privacy regulations.</li> <li>License Compliance: The program and its dependencies should adhere to open-source licenses.</li> </ul>"},{"location":"software_specification_template/#11-testability","title":"11. Testability","text":"<ul> <li>Unit Testing: The code should be designed to facilitate unit testing, with a target coverage of 80% or above.</li> <li>Integration Testing: The program should have a suite of integration tests covering key functionalities.</li> </ul> <p>These non-functional requirements focus on aspects such as performance, reliability, security, usability, maintainability, compatibility, and compliance. Adjust and expand these requirements based on the specific needs and constraints of your Python CLI program.</p>"},{"location":"software_specification_template/#3-functional-specifications","title":"3. Functional Specifications","text":""},{"location":"software_specification_template/#31-use-cases","title":"3.1 Use Cases","text":"<p>List and describe the main use cases of the CLI program.</p>"},{"location":"software_specification_template/#32-features","title":"3.2 Features","text":"<p>Detail the features that the CLI program will provide.</p>"},{"location":"software_specification_template/#4-technical-specifications","title":"4. Technical Specifications","text":""},{"location":"software_specification_template/#41-programming-language","title":"4.1 Programming Language","text":"<p>Specify the programming language (Python) and version to be used.</p>"},{"location":"software_specification_template/#42-dependencies","title":"4.2 Dependencies","text":"<p>List any third-party libraries or modules that the project will depend on.</p>"},{"location":"software_specification_template/#43-directory-structure","title":"4.3 Directory Structure","text":"<p>Outline the recommended directory structure for the project.</p>"},{"location":"software_specification_template/#44-cli-interface","title":"4.4 CLI Interface","text":"<p>Describe the command-line interface, including commands, options, and arguments.</p>"},{"location":"software_specification_template/#5-development-environment","title":"5. Development Environment","text":"<p>Specify the development tools and environment needed for the project.</p>"},{"location":"software_specification_template/#6-testing","title":"6. Testing","text":"<p>Detail the testing approach, including unit tests, integration tests, and any testing frameworks to be used.</p>"},{"location":"software_specification_template/#7-documentation","title":"7. Documentation","text":"<p>Outline the documentation plan, including inline code comments, README files, and any user or developer documentation.</p>"},{"location":"software_specification_template/#8-version-control","title":"8. Version Control","text":"<p>Specify the version control system (e.g., Git) and repository hosting service.</p>"},{"location":"software_specification_template/#9-deployment","title":"9. Deployment","text":"<p>Describe the deployment process and any specific considerations.</p>"},{"location":"software_specification_template/#10-maintenance","title":"10. Maintenance","text":"<p>Provide information on ongoing maintenance, bug tracking, and potential future updates.</p> <p>This template is a starting point, and you can customize it based on the specific needs and complexity of your CLI program. Ensure that each section is detailed enough to guide the development and implementation process effectively.</p>"},{"location":"system_caller/","title":"System Caller module","text":""},{"location":"system_caller/#phi_masker_utils.system_caller.execute_cmd","title":"<code>execute_cmd(cmd, outdir=None, stdout_file=None, stderr_file=None, verbose=DEFAULT_VERBOSE)</code>","text":"<p>Execute a command via system call using the subprocess module.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>str</code> <p>The executable to be invoked.</p> required <code>outdir</code> <code>str</code> <p>The output directory where STDOUT, STDERR and the shell script should be written to.</p> <code>None</code> <code>stdout_file</code> <code>str</code> <p>The file to which STDOUT will be captured in.</p> <code>None</code> <code>stderr_file</code> <code>str</code> <p>The file to which STDERR will be captured in.</p> <code>None</code> <p>Returns:     str: The path to the file where STDOUT was written to.</p> Source code in <code>phi_masker_utils/system_caller.py</code> <pre><code>def execute_cmd(\n    cmd: str,\n    outdir: str = None,\n    stdout_file=None,\n    stderr_file=None,\n    verbose: bool = DEFAULT_VERBOSE,\n) -&gt; str:\n    \"\"\"Execute a command via system call using the subprocess module.\n\n    Args:\n        cmd (str): The executable to be invoked.\n        outdir (str): The output directory where STDOUT, STDERR and the shell script should be written to.\n        stdout_file (str): The file to which STDOUT will be captured in.\n        stderr_file (str): The file to which STDERR will be captured in.\n    Returns:\n        str: The path to the file where STDOUT was written to.\n    \"\"\"\n    if cmd is None:\n        raise Exception(\"cmd was not specified\")\n\n    cmd = cmd.strip()\n\n    logging.info(f\"Will attempt to execute '{cmd}'\")\n    if verbose:\n        print(f\"Will attempt to execute '{cmd}'\")\n\n    if outdir is None:\n        outdir = \"/tmp\"\n        logging.info(\n            f\"outdir was not defined and therefore was set to default '{outdir}'\"\n        )\n\n    if stdout_file is None:\n        stdout_file = _derive_std_file(cmd, outdir, \"stdout\")\n\n    if stderr_file is None:\n        stderr_file = _derive_std_file(cmd, outdir, \"stderr\")\n\n    if os.path.exists(stdout_file):\n        logging.info(\n            f\"STDOUT file '{stdout_file}' already exists so will delete it now\"\n        )\n        os.remove(stdout_file)\n\n    if os.path.exists(stderr_file):\n        logging.info(\n            f\"STDERR file '{stderr_file}' already exists so will delete it now\"\n        )\n        os.remove(stderr_file)\n\n    consolidated_cmd = cmd\n    p = subprocess.Popen(consolidated_cmd, shell=True)\n\n    (stdout, stderr) = p.communicate()\n\n    pid = p.pid\n\n    logging.info(f\"The child process ID is '{pid}'\")\n    if verbose:\n        print(f\"The child process ID is '{pid}'\")\n\n    p_status = p.wait()\n\n    p_returncode = p.returncode\n\n    if p_returncode is not None:\n        logging.info(f\"The return code was '{p_returncode}'\")\n    else:\n        logging.info(\"There was no return code\")\n\n    if p_status == 0:\n        logging.info(f\"Execution of cmd '{cmd}' has completed\")\n    else:\n        raise Exception(f\"Received status '{p_status}'\")\n\n    if stdout is not None:\n        logging.info(\"stdout is: \" + stdout_file)\n\n    if stderr is not None:\n        logging.info(\"stderr is: \" + stderr_file)\n\n    return stdout_file\n</code></pre>"}]}